######### BLOCKSCOUT HAPROXY CONFIG ##########
<%_ Object.entries(meta).map(([k,v]) => { _%>
## <%= k %>: <%= v %>
<%_ }) _%>
##############################################

global
    debug
    log /dev/log local0 debug
    log /dev/log local1 debug
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon
    tune.ssl.default-dh-param 2048
    maxconn 100000

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3

defaults
    log global
    mode    http
    option  httplog
    option  http-server-close
    option  redispatch
    option  contstats
    option  logasap
    timeout tunnel  3600s
    timeout connect 5s
    timeout client  25s
    timeout server  25s
    timeout queue 30s
    timeout tarpit 60s
    timeout http-request 15s
    timeout http-keep-alive 1s
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

    option httpchk GET /

<%_ if (conf.stats_uri) { _%>
    stats enable
    stats hide-version
    stats uri <%= conf.stats_uri %>
    <%= tags.ifne`stats auth ${conf.stats_auth}` %>
<%_ } _%>

    default-server init-addr last,libc,none

frontend explorer
    bind *:80
    bind *:443 ssl crt <%= conf.ssl_cert_path %> alpn h2,http/1.1
    mode http

    #Set CSP to make JS works
    http-response set-header Content-Security-Policy "<% Object.entries(conf.content_security_policy_srcs).map(([k,v]) => { %><%= k %> <%= v.join(' ') %>;<% }) %>"
    http-response set-header X-Frame-Options ALLOWALL
    http-response set-header Access-Control-Allow-Origin *

    #Check for WebSocket
    acl is_upgrade hdr(Connection) -i upgrade
    acl is_websocket hdr(Upgrade) -i websocket

    #Check if cookie is set
    acl is_cookie hdr_sub(cookie) network
    #Check for network type & define backends
<%_ Object.entries(conf.endpoints).map(([net_type, type_conf]) => { _%>
    #### <%= net_type %>
    acl is_<%= net_type %> path_beg -i /<%= net_type %>
<%_     Object.entries(type_conf.nets).map(([net_name, net_conf]) => { _%>
    ######## <%= net_type %>/<%= net_name %>
    acl is_<%= net_type %>_<%= net_name %> path_beg -i /<%= net_type %>/<%= net_name %>
    acl is_cookie_<%= net_type %>_<%= net_name %> hdr_sub(cookie) network=<%= net_type %>_<%= net_name %>
<%_         if (net_conf.redirect) { _%>
    http-request redirect code <%= net_conf.redirect.code || 307 %> location <%= net_conf.redirect.location.split('$PATH_WO_PREFIX').join(`%[url,regsub(^/${net_type}/${net_name},)]`) %> if is_<%= net_type %>_<%= net_name %>
    <%_     } else { _%>
<%_             if (net_conf.aliases) for (let alias of net_conf.aliases) { _%>
    acl is_<%= net_type %>_<%= alias %> path_beg -i /<%= net_type %>/<%= alias %>
    http-request redirect code 308 location "https://%[hdr(host)]%[url,regsub(^/<%= net_type %>/<%= alias %>,/<%= net_type %>/<%= net_name %>,)]\r\nX-Frame-Options: ALLOWALL\r\nAccess-Control-Allow-Origin: *" if is_<%= net_type %>_<%= alias %>
<%_             } _%>
    use_backend <%= net_type %>_<%= net_name %> if is_<%= net_type %>_<%= net_name %>
    use_backend <%= net_type %>_<%= net_name %>_ws if is_websocket is_cookie_<%= net_type %>_<%= net_name %>
<%_         } _%>
<%_     }) _%>

<%_ }) _%>

    #default redirect
    redirect prefix /<%= conf.default_endpoint.net_type %>/<%= conf.default_endpoint.net_name %> if !is_cookie !is_websocket <%= funs.none_of(Object.keys(conf.endpoints), 'is_') %>
    #redirect for networks
<%_ Object.entries(conf.endpoints).map(([net_type, type_conf]) => { _%>
<%_     Object.entries(type_conf.nets).filter(([net_name, net_conf]) => !net_conf.redirect).map(([net_name, net_conf]) => { _%>
    redirect prefix /<%= net_type %>/<%= net_name %> if is_cookie_<%= net_type %>_<%= net_name %> !is_websocket <%= funs.none_of(Object.keys(conf.endpoints), 'is_') %>
<%_     }) _%>
<%_ }) _%>

    default_backend <%= conf.default_endpoint.net_type %>_<%= conf.default_endpoint.net_name %>

# backends
<%_ Object.entries(conf.endpoints).map(([net_type, type_conf]) => { _%>
<%_     Object.entries(type_conf.nets).filter(([net_name, net_conf]) => !net_conf.redirect).map(([net_name, net_conf]) => { _%>
backend <%= net_type %>_<%= net_name %>
    #Proxy mode
    mode http

    #Backend queries should not have network prefix, so we delete it
    acl is_<%= net_type %>_<%= net_name %> path_beg -i /<%= net_type %>/<%= net_name %>
    reqirep ^([^\ ].*)<%= net_type %>/<%= net_name %>[/]?(.*) \1\2 if is_<%= net_type %>_<%= net_name %>

    #Setting headers to mask our query
    http-request set-header X-Forwarded-Host %[req.hdr(Host)]
    http-request set-header X-Client-IP %[src]
    http-request set-header Host <%= net_conf.host %>

    #Specifying cookie to insert
    cookie network insert

    #Server list. Format:
    #server <name> <address>:<port> cookie <network_name> check inter 60000 fastinter 1000 fall 3 rise 3 ssl verify none
    server default <%= net_conf.host %>:<%= net_conf.port %> cookie <%= net_type %>_<%= net_name %> <%= net_conf.ssl_check? 'check-ssl':'check' %> inter 60000 fastinter 1000 fall 3 rise 3 ssl verify none

backend <%= net_type %>_<%= net_name %>_ws
    #Check if WebSocket request is correct
    acl hdr_websocket_key      hdr_cnt(Sec-WebSocket-Key)      eq 1
    acl hdr_websocket_version  hdr_cnt(Sec-WebSocket-Version)  eq 1
    http-request deny if ! hdr_websocket_key ! hdr_websocket_version

    #WebSockets should be forwarded, not http proxied
    option forwardfor

    #Setting headers to mask our query
    http-request set-header Host <%= net_conf.host %>
    http-request set-header Origin <%= net_conf.valid_ssl? 'https':'http' %>://<%= net_conf.host %>:<%= net_conf.port %>

    #Specifying cookie to insert
    cookie network insert

    #Server list. Format:
    #server <name> <address>:<port> cookie <network_name> check inter 60000 fastinter 1000 fall 3 rise 3 check inter 60000 fastinter 1000 fall 3 rise 3 ssl verify none maxconn 30000
    server default <%= net_conf.host %>:<%= net_conf.port %> cookie <%= net_type %>_<%= net_name %> <%= net_conf.valid_ssl? 'check-ssl':'check' %> inter 60000 fastinter 1000 fall 3 rise 3 maxconn 30000 ssl verify none

<%_     }) _%>
<%_ }) _%>
